#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Auto Buyer & Poster for VK Chat
--------------------------------
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å ¬´—Å–∫—É–ø–∫–∏¬ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã –ü–æ–¥–∑–µ–º–µ–ª—å—è –ö–æ–ª–æ–¥—Ü–∞ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ,
–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–æ–ª–æ—Ç–æ —Ç–µ–º,
–∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   pip install vk_api selenium colorama requests

2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: —Ç–æ–∫–µ–Ω, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ç.–¥.

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.

–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
 - –°–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç longpoll –æ—Ç vk_api –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞.

GitHub: https://github.com/WellDungeonBot/WellDungeon-AutoBuyer-WDB
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import json
import os
import re
import sys
import time
import traceback
from datetime import datetime, timedelta

import vk_api
from vk_api import utils
from vk_api.longpoll import VkEventType, VkLongPoll
from colorama import Style, Fore

from selenium import webdriver
from selenium.webdriver.common.by import By

# ========== –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ==========
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATETIME_PATH = os.path.join(BASE_DIR, 'last-datetime.txt')
PRICE_LIST_JSON = os.path.join(BASE_DIR, 'price_list.json')

# ========== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–§–ò–õ–Ø –ò –ß–ê–¢–ê ==========
PROFILE_LINK = 'LINK_1'       # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (VIP3)
SETTINGS_LINK = 'LINK_2'      # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞ –ø–µ—Ä–µ–¥–∞—á
TOKEN = 'YOUR_VK_TOKEN'       # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –í–ö
CHAT_ID = 2000000001          # ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–µ–¥—ë—Ç—Å—è —Å–∫—É–ø–∫–∞
SERVICE_CHAT_ID = -227249427  # ID —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —á–∞—Ç–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —á–∞—Ç —Å –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º https://vk.com/wdb_fun)
AUTOPOST_TEXT = "–ê–≤—Ç–æ—Å–∫—É–ø–æ–º –ø–æ–∫—É–ø–∞—é:" # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —à–∞–ø–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∞
GOLD_LIMIT = 50000 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ä–æ–≥–æ–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞ –ø–µ—Ä–µ–¥–∞—á

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–ù–ï –¢–†–û–ì–ê–¢–¨) ==========
op = webdriver.ChromeOptions()
op.add_argument('headless')
op.add_argument('no-sandbox')
driver = webdriver.Chrome(options=op)

skup_flag = True               # –§–ª–∞–≥ –≤–∫–ª—é—á—ë–Ω–Ω–æ–π/–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–∫—É–ø–∫–∏
additional_text = ""           # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–µ
price_list = {}                # –°–ª–æ–≤–∞—Ä—å {–ø—Ä–µ–¥–º–µ—Ç: —Ü–µ–Ω–∞}
FIRST_NAME = ""
LAST_NAME = ""
ACCOUNT_ID = 0
pause_flag = False

# ========== –ü–ê–õ–ò–¢–†–ê –î–õ–Ø –õ–û–ì–û–í (colorama) ==========
ly = Fore.LIGHTYELLOW_EX
lg = Fore.LIGHTGREEN_EX
lr = Fore.LIGHTRED_EX
lm = Fore.LIGHTMAGENTA_EX
lc = Fore.LIGHTCYAN_EX
g = Fore.GREEN
d = Style.RESET_ALL

# ========== –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ü–†–ï–î–ú–ï–¢ -> –≠–ú–û–î–ñ–ò ==========
emoji = {
    "–≥—Ä—è–∑–Ω—ã–π —É–¥–∞—Ä": "üìï", "—Å–ª–∞–±–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ": "üìï", "—É–¥–∞—Ä –≤–∞–º–ø–∏—Ä–∞": "üìï", "–º–æ—â–Ω—ã–π —É–¥–∞—Ä": "üìï", "—Å–∏–ª–∞ —Ç–µ–Ω–µ–π": "üìï",
    "—Ä–∞—Å–ø—Ä–∞–≤–∞": "üìï", "—Å–ª–µ–ø–æ—Ç–∞": "üìï", "—Ä–∞—Å—Å–µ—á–µ–Ω–∏–µ": "üìï", "–±–µ—Ä—Å–µ—Ä–∫–µ—Ä": "üìï", "—Ç–∞—Ä–∞–Ω": "üìï", "–ø—Ä–æ–∫–ª—è—Ç–∏–µ —Ç—å–º—ã": "üìï",
    "–æ–≥–æ–Ω–µ–∫ –Ω–∞–¥–µ–∂–¥—ã": "üìï", "—Ü–µ–ª–µ–±–Ω—ã–π –æ–≥–æ–Ω—å": "üìï", "–∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ": "üìï", "–∑–∞—Ä–∞–∂–µ–Ω–∏–µ": "üìï", "—Ä–∞—Å–∫–æ–ª": "üìï",
    "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": "üìò", "–±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": "üìò", "–º–∞—Ä–æ–¥–µ—Ä": "üìò", "–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "üìò",
    "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": "üìò", "–≤–µ–¥—å–º–∞–∫": "üìò", "—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å": "üìò", "–∑–∞–ø–∞—Å–ª–∏–≤–æ—Å—Ç—å": "üìò", "–æ—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –≥–æ–ª–æ–≤–∞–º–∏": "üìò",
    "–ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å": "üìò", "—É–ø–æ—Ä–Ω–æ—Å—Ç—å": "üìò", "—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è": "üìò", "—Ä–∞—Å—á–µ—Ç–ª–∏–≤–æ—Å—Ç—å": "üìò", "–æ—à–µ–ª–æ–º–ª–µ–Ω–∏–µ": "üìò",
    "—Ä—ã–±–∞–∫": "üìò", "–Ω–µ—É—è–∑–≤–∏–º—ã–π": "üìò", "–∫–æ–ª—é—â–∏–π —É–¥–∞—Ä": "üìò", "–±–µ—Å—Å—Ç—Ä–∞—à–∏–µ": "üìò", "—Ä–µ–∂—É—â–∏–π —É–¥–∞—Ä": "üìò",
    "—Ñ–µ–Ω–∏–∫—Å": "üìò", "–Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º—ã–π": "üìò", "—Å—É–µ–≤–µ—Ä–Ω–æ—Å—Ç—å": "üìò", "–≥–ª–∞–¥–∏–∞—Ç–æ—Ä": "üìò", "–≤–æ–∑–¥–∞—è–Ω–∏–µ": "üìò",
    "—É—á–µ–Ω–∏–∫": "üìò", "–ø—Ä–æ—á–Ω–æ—Å—Ç—å": "üìò", "—Ä–∞—Å—Ç–æ—Ä–æ–ø–Ω–æ—Å—Ç—å": "üìò", "—É—Å—Ç—Ä–∞—à–µ–Ω–∏–µ": "üìò", "–∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞": "üìò",
    "–¥—Ä–æ–±—è—â–∏–π —É–¥–∞—Ä": "üìò", "–∑–∞—â–∏—Ç–Ω–∞—è —Å—Ç–æ–π–∫–∞": "üìò", "—Å—Ç–æ–π–∫–∞ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏—è": "üìò", "–≤–æ–¥–æ—Ö–ª–µ–±": "üìò",
    "–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ": "üìò", "–±—Ä–∞–∫–æ–Ω—å–µ—Ä": "üìò", "–ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ": "üìò", "–ª–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫": "üìò", "–Ω–µ–∑–∞–º–µ—Ç–Ω–æ—Å—Ç—å": "üìò",
    "–∞—Ç–ª–µ—Ç–∏–∫–∞": "üìò", "—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": "üìò", "—É–≥—Ä–æ–∑–∞": "üìò"
}

# ============================================================================
#                        –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–£–ü–ö–û–ô
# ============================================================================

def skup_off():
    """
    –í—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏—ë–º –ø–µ—Ä–µ–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    global skup_flag
    driver.get(SETTINGS_LINK)
    driver.execute_script("window.run_program(this, '51173l3l06edf74935f97a43', 0, 0);")
    skup_flag = False


def skup_on():
    """
    –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏—ë–º –ø–µ—Ä–µ–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    global skup_flag
    driver.get(SETTINGS_LINK)
    driver.execute_script("window.run_program(this, '51173l4l86ac1c1d73744501', 0, 0);")
    skup_flag = True


def change_status():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
    –ï—Å–ª–∏ –∑–æ–ª–æ—Ç–∞ >= GOLD_LIMIT –∏ —Å–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ -> –≤–∫–ª—é—á–∞–µ—Ç —Å–∫—É–ø–∫—É.
    –ï—Å–ª–∏ –∑–æ–ª–æ—Ç–∞ < GOLD_LIMIT –∏ —Å–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ -> –≤—ã–∫–ª—é—á–∞–µ—Ç —Å–∫—É–ø–∫—É.
    """
    try:
        driver.get(PROFILE_LINK)
        gold_str = driver.find_element(By.ID, "r_13322").find_element(By.TAG_NAME, "span").text.strip()
        gold = int(gold_str)
        print(f"[INFO] My gold: {gold}")

        if gold >= GOLD_LIMIT and not skup_flag: skup_on()
        elif gold < GOLD_LIMIT and skup_flag: skup_off()
    except Exception:
        print(traceback.format_exc())

# ============================================================================
#             –ö–õ–ê–°–° –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –†–ê–ë–û–¢–´ –° LONGPOLL
# ============================================================================

class MyVkLongPoll(VkLongPoll):
    """
    –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ VkLongPoll —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫.
    """
    def update_longpoll_server(self, update_ts=True):
        values = {'lp_version': '3', 'need_pts': self.pts}
        if self.group_id:
            values['group_id'] = self.group_id
        response = self.vk.method('messages.getLongPollServer', values)
        self.key = response['key']
        self.server = response['server']
        self.url = f"https://{self.server}"
        if update_ts:
            self.ts = response.get('ts')
            if self.pts:
                self.pts = response.get('pts')

    def check(self):
        values = {
            'act': 'a_check',
            'key': self.key,
            'ts': self.ts,
            'wait': self.wait,
            'mode': self.mode,
            'version': 3
        }
        response = self.session.get(self.url, params=values, timeout=self.wait + 10).json()

        if 'failed' not in response:
            self.ts = response.get('ts')
            if self.pts:
                self.pts = response.get('pts')
            events = []
            for raw_event in response['updates']:
                try:
                    event = self._parse_event(raw_event)
                    events.append(event)
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")
                    continue
            if self.preload_messages:
                self.preload_message_events_data(events)
            return events

        elif response['failed'] == 1:
            self.ts = response.get('ts')
        elif response['failed'] in (2, 3):
            self.update_longpoll_server(update_ts=(response['failed'] == 3))

        print('[WARNING] check() –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π!')
        return []

    def listen(self):
        while True:
            try:
                while True: yield from self.check()
            except Exception as e:
                print(f"[ERROR] –í longpoll –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ {type(e).__name__}:")
                print(traceback.format_exc())
                print(f"[ERROR] –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# ============================================================================
#         –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° JSON –ü–†–ê–ô–°-–õ–ò–°–¢–û–ú
# ============================================================================

def load_price_list():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ JSON –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å price_list.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    global price_list
    try:
        with open(PRICE_LIST_JSON, 'r', encoding='utf-8') as f:
            price_list = json.load(f)
            price_list = {key.lower(): value for key, value in price_list.items()}
    except (FileNotFoundError, json.JSONDecodeError): price_list = {}
    print(f"[INFO] –í–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç: {price_list}")
    return price_list

def save_price_list():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å price_list –≤ —Ñ–∞–π–ª JSON.
    """
    with open(PRICE_LIST_JSON, 'w', encoding='utf-8') as f:
        json.dump(price_list, f, ensure_ascii=False, indent=4)

# ============================================================================
#                           –†–ê–ë–û–¢–ê –° –î–ê–¢–ê–ú–ò
# ============================================================================

def save_last_post_time(post_time: datetime):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É/–≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –≤ —Ñ–∞–π–ª DATETIME_PATH –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ.
    """
    with open(DATETIME_PATH, 'w', encoding='utf-8') as f:
        f.write(post_time.isoformat())

def load_last_post_time() -> datetime:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É/–≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –∏–∑ DATETIME_PATH, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime.
    """
    try:
        with open(DATETIME_PATH, 'r', encoding='utf-8') as f: dt_str = f.read().strip()
        return datetime.fromisoformat(dt_str)
    except (FileNotFoundError, ValueError):
        print(f"{lr}[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞{d}")
        current_time = datetime.now()
        save_last_post_time(current_time)
        return current_time

# ============================================================================
#                 –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–ü–û–°–¢–ê
# ============================================================================

def get_emoji(item_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ emoji.
    """
    return emoji.get(item_name.lower(), "")

def now_autopost_text():
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.
    """
    load_price_list()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    result = AUTOPOST_TEXT
    categories = ["üìï", "üìò", ""]
    for cat in categories:
        for item, cost in price_list.items():
            if get_emoji(item) == cat:
                item_text = item.capitalize()
                result += f"\n{cat}{item_text} - {cost}üåï"
    if additional_text: result += f"\n{additional_text}"
    return result

def send_autopost(vk_session):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç (CHAT_ID).
    """
    vk_session.method('messages.send', {
        'random_id': 0,
        'peer_id': CHAT_ID,
        'message': now_autopost_text(),
    })

# ============================================================================
#                  –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ============================================================================

def authorize(vk_session):
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –í–ö –ø–æ —Ç–æ–∫–µ–Ω—É, –≤—ã–≤–æ–¥–∏—Ç –∏–º—è/—Ñ–∞–º–∏–ª–∏—é/ID –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    info_account = vk_session.method('account.getProfileInfo', {})
    first_name = info_account["first_name"]
    last_name = info_account["last_name"]
    account_id = info_account["id"]
    print(f"[INFO] –ê–∫–∫–∞—É–Ω—Ç {lm}{first_name} {last_name} ({account_id}){lg} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!{d}")
    return first_name, last_name, account_id

def get_last_mid_from_uid(vk_session, uid):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id (uid) –∏–∑ —á–∞—Ç–∞ CHAT_ID.
    """
    history = vk_session.method('messages.getHistory', {
        'count': 200,
        'peer_id': CHAT_ID,
    })
    for msg_tuple in history.items():
        for msg_1 in msg_tuple:
            if isinstance(msg_1, list):
                for msg_2 in msg_1:
                    if msg_2.get("from_id") == uid:
                        return msg_2.get("id")
    return None

def send_money(vk_session, uid, cost):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–µ—Ä–µ–¥–∞—Ç—å XXX –∑–æ–ª–æ—Ç–∞" –≤ —á–∞—Ç, —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è uid.
    """
    msg = f"–ü–µ—Ä–µ–¥–∞—Ç—å {cost} –∑–æ–ª–æ—Ç–∞"
    vk_session.method('messages.send', {
        'peer_id': CHAT_ID,
        'message': msg,
        'reply_to': get_last_mid_from_uid(vk_session, uid),
        'random_id': 0
    })
    print(f"{lg}[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏ ({datetime.now().strftime('%H:%M:%S')}): \n\t{g}{msg}{d}\n")

def message_processor(vk_session, event, account_id, first_name):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ price_list, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è send_money().
    """
    msg = event.text.lower()
    mention_pattern = f"[id{account_id}|{first_name.lower()}]"
    if mention_pattern in msg:
        uid_start_idx = msg.rfind("id") + 2
        uid_end_idx = msg.rfind("|")
        uid = int(msg[uid_start_idx:uid_end_idx])
        for item, cost in price_list.items():
            if "–ø–æ–ª—É—á–µ–Ω–æ:" in msg and "–æ—Ç –∏–≥—Ä–æ–∫–∞" in msg and item.lower() in msg:
                print(f"{lg}[INFO] –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç ({datetime.now().strftime('%H:%M:%S')}): \n\t{g}{msg}{d}\n")
                item_index = msg.find(item)
                quantity = 1
                prefix = msg[item_index - 3:item_index]
                match_digits = re.search(r'(\d+)\*', prefix)
                if match_digits:
                    quantity = int(match_digits.group(1))
                total_cost = str(quantity * cost)
                send_money(vk_session, uid, total_cost)

def send_answer(vk_session, event, answer):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–ø–ª–∞–π –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ (–ø–æ event.message_id).
    """
    vk_session.method('messages.send', {
        'random_id': 0,
        'peer_id': event.peer_id,
        'message': answer,
        'reply_to': event.message_id
    })

# ============================================================================
#         –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ò–í–ï–ù–¢–ê LONGPOLL
# ============================================================================

def await_event(vk_session, lp):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∫—É–ø–∫–∏,
    –¥–µ–ª–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ.
    """
    global pause_flag, additional_text, AUTOPOST_TEXT
    for event in lp.listen():
        if event.type == VkEventType.MESSAGE_NEW:
            if event.peer_id == CHAT_ID:
                event_time = datetime.now()
                if (event_time - load_last_post_time()) > timedelta(minutes=180) and not pause_flag:
                    change_status()
                    save_last_post_time(event_time)
                    send_autopost(vk_session)
                if "–ø–æ–ª—É—á–µ–Ω–æ:" in event.text.lower() \
                   and "–æ—Ç –∏–≥—Ä–æ–∫–∞" in event.text.lower() \
                   and event.user_id == -183040898:
                    message_processor(vk_session, event, ACCOUNT_ID, FIRST_NAME)
            elif event.peer_id == SERVICE_CHAT_ID and event.from_me:
                command_text = event.text.lower().strip()
                if "/—Å–∫—É–ø+" in command_text:
                    item_str = re.sub(r'/—Å–∫—É–ø\+', '', command_text, flags=re.IGNORECASE).strip()
                    if re.match(r'^[–ê-–Ø–∞-—è—ë–Å\s]+:\s*\d+$', item_str):
                        try:
                            name, cost_str = item_str.split(':', 1)
                            name = name.strip().lower()
                            cost = int(cost_str.strip())
                            load_price_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
                            price_list[name] = cost
                            save_price_list()
                            send_answer(vk_session, event, now_autopost_text())
                        except Exception as e: send_answer(vk_session, event, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
                    else: send_answer(vk_session, event, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É.")
                elif "/—Å–∫—É–ø-" in command_text:
                    item_str = re.sub(r'/—Å–∫—É–ø-', '', command_text, flags=re.IGNORECASE).strip()
                    load_price_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
                    if item_str in price_list:
                        del price_list[item_str]
                        save_price_list()
                        send_answer(vk_session, event, now_autopost_text())
                    else:
                        send_answer(vk_session, event, "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ.")
                elif "/—Å–∫—É–ø=" in command_text:
                    additional_text = re.sub(r'/—Å–∫—É–ø=', '', event.text.strip(), flags=re.IGNORECASE).strip()
                    send_answer(vk_session, event, now_autopost_text())
                elif "/—Å–∫—É–ø" == command_text:
                    send_answer(vk_session, event, f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∞:\n{now_autopost_text()}")
                elif "/—Å–∫—É–ø—Ç–µ–∫—Å—Ç" in command_text:
                    AUTOPOST_TEXT = re.sub(r'/—Å–∫—É–ø—Ç–µ–∫—Å—Ç', '', event.text.strip(), flags=re.IGNORECASE).strip()
                    send_answer(vk_session, event, now_autopost_text())
                elif "—Å–∫—É–ø, –ø–∞—É–∑–∞" in command_text:
                    if pause_flag: send_answer(vk_session, event, "–ê–≤—Ç–æ–ø–æ—Å—Ç —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—É–∑—ã!")
                    else:
                        pause_flag = True
                        send_answer(vk_session, event, "–ê–≤—Ç–æ–ø–æ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É!")
                elif "—Å–∫—É–ø, –ø—É—Å–∫" in command_text:
                    if not pause_flag: send_answer(vk_session, event, "–ê–≤—Ç–æ–ø–æ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                    else:
                        pause_flag = False
                        send_answer(vk_session, event, "–ê–≤—Ç–æ–ø–æ—Å—Ç –∑–∞–ø—É—â–µ–Ω!!")
                elif "—Å–∫—É–ø, –≤—ã–∫–ª—é—á–∏—Å—å" in command_text:
                    print(f"\n{lr}[INFO] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!{d}")
                    send_answer(vk_session, event, "–í—ã–∫–ª—é—á–∞—é—Å—å!")
                    sys.exit()

def process():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ¬´–ø—Ä–æ—Å–ª—É—à–∫–∏¬ª —Å–æ–±—ã—Ç–∏–π.
    """
    while True:
        try: await_event(vk, longpoll)
        except Exception as err:
            err_str = str(err).replace('\n', '\n\t')
            print(f"{lr}[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ({datetime.now().strftime('%H:%M:%S')}):\n\t{err_str}")
            print(traceback.format_exc())
            time.sleep(1)
            continue


# ============================================================================
#                                   MAIN
# ============================================================================

if __name__ == '__main__':
    print(r"""
                                              
    ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÄ     ‚ñà     ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ
      ‚ñÄ‚ñà‚ñà     ‚ñÑ‚ñà‚ñà     ‚ñÑ‚ñà   ‚ñà‚ñà    ‚ñÄ‚ñà‚ñà‚ñÑ ‚ñà‚ñà    ‚ñà‚ñà
       ‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñà    ‚ñà‚ñà     ‚ñÄ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà
        ‚ñà‚ñà‚ñÑ  ‚ñà‚ñÄ ‚ñà‚ñà‚ñÑ  ‚ñà‚ñÄ    ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÑ‚ñÑ
        ‚ñÄ‚ñà‚ñà ‚ñà‚ñÄ  ‚ñÄ‚ñà‚ñà ‚ñà‚ñÄ     ‚ñà‚ñà     ‚ñÑ‚ñà‚ñà ‚ñà‚ñà    ‚ñÄ‚ñà
         ‚ñÑ‚ñà‚ñà‚ñÑ    ‚ñÑ‚ñà‚ñà‚ñÑ      ‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñÄ ‚ñà‚ñà    ‚ñÑ‚ñà
          ‚ñà‚ñà      ‚ñà‚ñà     ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                 
                                          
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—É–ø—â–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —á–∞—Ç–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ü–æ–¥–∑–µ–º–µ–ª–∏–π –ö–æ–ª–æ–¥—Ü–∞
    """)

    print(f"[INFO] –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞ (–∏–∑ —Ñ–∞–π–ª–∞): {load_last_post_time()}")

    try: load_price_list()
    except Exception as e:
        print(f"{lr}[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:\n\t{e}{d}")
        sys.exit(1)

    vk = vk_api.VkApi(token=TOKEN)
    longpoll = MyVkLongPoll(vk)
    FIRST_NAME, LAST_NAME, ACCOUNT_ID = authorize(vk)

    process()
